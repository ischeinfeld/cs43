(foo)
(require hw1.core)
(load "hw1.core")
(foo)
(foo 1)
(foo "a")
(/ 1 2)
(1/2)
1/2
(* 2 1/2)
(= 1N 1)
(= 1N 1 1.0)
(= 1N 1.0)
(type 1N)
(def l '(1 2 3))
l
(cons 1 l)
(conj l 1)
(conj l 1 2)
(into [1 2] '(3 4))
(into '(1 2) '(3 4))
(numerator 1/2)
(numerator 1)
(2/1)
2/1
(denominator 3)
(mod 16 18)
(mod 18 16)
(reduce + 1)
(reduce + (list 1 2))
(reduce + (list 1))
(+ 1)
(+ 1 4)
(size (list 1 2))
(len (list 1 2))
(* 1 2 3 4)
(* '(1 2 3))
(map #(* % 5) '(1 2 3))
(lcm 1 4 5)
(filter ratio? '(1 2 3))
(map denominator '())
(reduce * '())
(reduce + '())
(= 50 50N)
(= '(1 2) '(1 2))
(= '(1 2) '(1 4))
exit
("abc" 2)
(2 "abc")
(get "abc" 2)
(map :suite hand)
(def hand [{:suite "h" :rank "a"} {:suite "d" :rank "1"}])
hand
(map :suite hand)
(includes? [1 2 3] [1 2])
\A
(apply = [1 2 3])
(macroexpand '(apply = [1 2 3]))
(apply + [1 2 3] 4)
(def l '(1 2 3))
l
(conj l 3 4)
